name: Publish Docker image and deploy on staging

on:
  push:
    branches:
      - staging

env:
  # Must match k8s deployment name
  DEPLOYMENT: scanr
  DEPLOYMENT_NAMESPACE: staging
  DEPLOYMENT_URL: https://scanr.staging.dataesr.ovh

jobs:
  # publish-ghcr:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Log into registry
  #       run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build image
  #       run: docker build -f Dockerfile-staging -t ${{ github.repository }} .

  #     - name: Get Tag
  #       id: version
  #       run: echo ::set-output name=tag::${GITHUB_REF#refs/heads/}

  #     - name: Push image
  #       run: |
  #         IMAGE_ID=ghcr.io/${{ github.repository }}
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         docker tag ${{ github.repository }} $IMAGE_ID:${{ steps.version.outputs.tag }}
  #         docker push $IMAGE_ID:${{ steps.version.outputs.tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: publish-ghcr
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Deploy to Cluster
        id: kubectl-deploy
        uses: dataesr/kubectl-deploy@v1.1
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
        with:
          namespace: staging
          restart: scanr

      # - name: Notify in slack
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' --data '{"blocks": [{"type": "section", "text": {"type": "mrkdwn", "text": "Une nouvelle version de $DEPLOYMENT a été déployée !"}, "accessory": {"type": "button", "style": "primary", "text": {"type": "plain_text", "text": "Voir le site", "emoji": true }, "value": "go-to-page", "url": $DEPLOYMENT_URL, "action_id": "button-action" }}]}' ${{ secrets.SLACK_WEBHOOK }}
